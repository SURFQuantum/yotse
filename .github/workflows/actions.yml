name: Lint, Test, Example, Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
    - uses: pre-commit/action@v3.0.0
  ci:
    strategy:
      fail-fast: false
      matrix:
        task: [run-tests, run-examples]
        python-version: ["3.10"]
        os: [ubuntu-latest]
        poetry-version: ["1.6.1"]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        ref: ${{ github.head_ref }}
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      # see details (matrix, python-version, python-version-file, etc.)
      # https://github.com/actions/setup-python
    - name: Install poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: poetry install
    - name: Run the automated tests (ignore deprecation errors )
      if: matrix.task == 'run-tests'
      run: poetry run pytest -W ignore::DeprecationWarning --cov-report xml --cov=yotse tests/
    - name: Run the examples
      if: matrix.task == 'run-examples'
      run: poetry run python examples/run_examples.py

    # the following is coverage stuff that should only run on pull requests
    - name: Debug environment
      run: |
        env
        pwd
    - name: List directory contents
      run: |
        ls -al
    - name: Get Coverage
      if: github.event_name == 'pull_request' && matrix.task == 'run-tests'
      uses: orgoro/coverage@v3.1
      with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
    - name: Coverage Badge
      if: github.event_name == 'pull_request' && matrix.task == 'run-tests'
      uses: tj-actions/coverage-badge-py@v2
    - name: Verify Changed files
      if: github.event_name == 'pull_request' && matrix.task == 'run-tests'
      uses: tj-actions/verify-changed-files@v16
      id: verify-changed-files
      with:
        files: coverage.svg
    - name: Commit files
      if: github.event_name == 'pull_request' && steps.verify-changed-files.outputs.files_changed == 'true'  && matrix.task == 'run-tests'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add coverage.svg
        git commit -m "Updated coverage.svg"
    - name: Push changes
      if: github.event_name == 'pull_request' && steps.verify-changed-files.outputs.files_changed == 'true'  && matrix.task == 'run-tests'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.head_ref }}
        force: true
